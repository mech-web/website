# Version 0.0.2 - Documentation, Views, and the Inspector

June 12, 2019

Today we're happy to release <a href="https://github.com/mech-lang/mech/releases/tag/v0.0.2">Mech v0.0.2</a>. This release has improvements for the language itself, but the focus was on documentation and notebook features. First, we've overhauled the notebook interface so that most components are rendered in Rust wasm instead of Javascript. Eventually we will move over to an interface entirely written in Mech. Second, we've rendered Mech documents in HTML, rather than plain text. This necessitated finishing the formatter for syntax highlighting. Finally, we have included a couple tools like an inspector and block views that will help programmers. Let's look at each of these new features.

## Documentation

For this version we've started the never-finished task of writing documentation for Mech. To do this we've created a dialect of Markdown called "Mechdown". It supports all the features of Markdown (although not all are implemented yet), and has several extensions specific for Mech, like the ability to interpret and display the results of in-line Mech statements (for example, we can evaluate a simple math expression like [[45.7 * 4]]) and execute Mech blocks. This allows us to write live documentation for Mech directly in Mechdown.

In this release we're including a new <a href="https://github.com/mech-lang/syntax/blob/main/src/formatter.rs">formatter</a>, which takes a Mech AST and produces formatted Mech syntax. We use this formatter to provide syntax highlighting for Mech code blocks. For example:

  table = [|x y z|
            1 2 3
            4 5 6]

There's some work to do still in terms of formatting the output (especially when the columns differ in width), but it generally produces nice looking blocks of code.

<h3>Table of Contents</h3>

When you use Markdown headers in a Mech document, the notebook uses those to aid in document navigation. H1 headers are rendered in large text that spans the document, so you can quickly see what document you have opened. H2 headers are used to populate the Table of Contents on the left of the document. This table contains links that jump to the indicated section, which is convenient for longer documents. You can see this document has five such links.

## Views

Views are a notebook feature that allow us to write the output of a block directly under it. We can write any table within a block to a view by binding it to `block/view`. For example, we can print the result of adding two tables together

  x = [1 2 3
       4 5 6]
  y = [7 8 9
       6 5 4]
  block/view = x + y

Block views update their output continually to reflect the current value of the `block/view` table. We can create a timer for example:

  #time/timer = [period: 15, ticks: 0, hours: 0, minutes: 0, seconds: 0]

In another block we can do a computation using this timer, and view the result under the block itself:

  block/view = #time/timer.seconds * 3

We aren't limited to printing just numbers in a view. Below is an example of a scatter plot updating as parent table changes. The interface for this is not settled, and the visualization is very rough, but you can imagine putting any graph, video, or animation in this space to help visualize block functioning. 

  x = 0:650
  z = x + #time/timer.ticks
  y = math/sin(degrees: z) * 50 + 60
  block/view = [type: "scatter", x: [x], y: [y]]

In v0.0.3 we're planning to revisit views with a better way to create them. For example, instead of binding to a special table, we're exploring the possibility or adding some syntax sugar to the language to streamline this capability and encourage its usage. Also, we'll expand the types of views that are supported (right now it's just text and scatter plots).

## Inspector 

The inspector will be the main debugging tool in the Mech Notebook. As its name implies, it will allow you to inspect any aspect of a running Mech program, from the value of tables, to the result of a compiled block, to the properties on graphical elements of an output program. The first feature of the inspector we've implemented is the ability to inspect tables and see their values displayed as a table:

<img src="/img/inspector.gif" />

When you click on a table in a block, the inspector pops ups in a modal window nearby. The values displayed in the table update as they are recaculted. Try it out yourself with tables in the block below:

  students = [|name     age major         gpa|
               "Harold" 18  "Chemistry"   2.8
               "Omar"   19  "Art History" 3.2
               "Lisa"   19  "Comp Sci"    3.9]
  time = #time/timer.ticks
  x = [1:5 6:10]

There's a lot more work to do here. It would be nice to do the same thing we did with views able, and allow the data to be viewed as a chart, graph, video, or any other type of visualization. We'll be exploring new possibilities for this in v0.0.4 (two versions from now).

## Changelog

<h3>Language Documentation</h3>

- The beginnings of a <a href="http://docs.mech-lang.org/#/docs/tutorial.mec">tutorial</a>
- <a href="http://docs.mech-lang.org/#/docs/install.mec">installation</a> and <a href="http://docs.mech-lang.org/#/docs/running.mec">running</a> docs
- <a href="http://docs.mech-lang.org/#/docs/programs/model.mec">programming model</a> doc
- <a href="http://docs.mech-lang.org/#/docs/programs/tables.mec">table</a> doc
- <a href="http://docs.mech-lang.org/#/docs/programs/blocks.mec">blocks</a> doc
- <a href="http://docs.mech-lang.org/#/docs/programs/database.mec">database</a> doc
- <a href="http://docs.mech-lang.org/#/docs/core/slicing.mec">indexing and slicing</a> doc

<h3>Notebook</h3>

- Changed from js to rust
- Render .mec documents as rich HTML
- Render block views under block
- Added table inspector
- Added table of contents

<h3>Syntax</h3>

- Added syntax formatter
- Make logic functions composable e.g. `x & y | z`
- Inline filter expressions e.g. `table{x > 10}`

<h3>Libraries</h3>

- Added <a href="http://docs.mech-lang.org/#/docs/time/index.mec">time library</a>
- Renamed system/timer to <a href="http://docs.mech-lang.org/#/docs/time/timer.mec">time/timer</a>. Also renamed resolution to period
- Added <a href="http://docs.mech-lang.org/#/docs/math/index.mec">Math</a> index doc
- Added <a href="http://docs.mech-lang.org/#/docs/stat/index.mec">Stat</a> index doc
- Added <a href="http://docs.mech-lang.org/#/docs/stat/sum.mec">stat/sum</a> index doc
- Added <a href="http://docs.mech-lang.org/#/docs/math/sin.mec">math/sin</a> and <a href="http://docs.mech-lang.org/#/docs/math/cos.mec">cos</a> docs

<h3>Example Programs</h3>

- Added a simple <a href="http://docs.mech-lang.org/#/examples/breakout.mec">Pong game</a> that will eventually be the class arcade game Breakout.

## Roadmap

The next version, v0.0.3, will focus on input/output facilities, which will necessarily involve a closer look at the distribution model. In the subsequent version, v0.0.4, we will circle back to the notebook and work on improving tooling and programmer creature comforts.